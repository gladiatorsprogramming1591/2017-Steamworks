// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static CANTalon driveTrainCANTalonBR;
	public static CANTalon driveTrainCANTalonFR;
	public static CANTalon driveTrainCANTalonBL;
	public static CANTalon driveTrainCANTalonFL;
	public static RobotDrive driveTrainRobotDrive;
	public static Encoder driveTrainEncoderBR;
	public static Encoder driveTrainEncoderFR;
	public static Encoder driveTrainEncoderBL;
	public static Encoder driveTrainEncoderFL;
	public static CANTalon armCANArm;
	public static AnalogPotentiometer armArmPot;
	public static CANTalon winchWinchTop;
	public static CANTalon winchWinchBottom;
	public static RobotDrive winchWinchDrive;
	public static Relay flapFlapSpike;
	public static DigitalInput flapUpperLimitFlap;
	public static DigitalInput flapLowerLimitFlap;
	public static Relay gearPlungerGearSpike;
	public static DigitalInput gearPlungerPlungerLimit;
	public static AnalogInput rangeFinderSonarAI;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrainCANTalonBR = new CANTalon(7);
		LiveWindow.addActuator("DriveTrain", "CANTalonBR", driveTrainCANTalonBR);

		driveTrainCANTalonFR = new CANTalon(6);
		LiveWindow.addActuator("DriveTrain", "CANTalonFR", driveTrainCANTalonFR);

		driveTrainCANTalonBL = new CANTalon(4);
		LiveWindow.addActuator("DriveTrain", "CANTalonBL", driveTrainCANTalonBL);

		driveTrainCANTalonFL = new CANTalon(5);
		LiveWindow.addActuator("DriveTrain", "CANTalonFL", driveTrainCANTalonFL);

		driveTrainRobotDrive = new RobotDrive(driveTrainCANTalonBR, driveTrainCANTalonBL,
				driveTrainCANTalonFR, driveTrainCANTalonFL);

		driveTrainRobotDrive.setSafetyEnabled(true);
		driveTrainRobotDrive.setExpiration(0.1);
		driveTrainRobotDrive.setSensitivity(0.5);
		driveTrainRobotDrive.setMaxOutput(1.0);
		driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
		driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
		driveTrainEncoderBR = new Encoder(0, 1, false, EncodingType.k4X);
		LiveWindow.addSensor("DriveTrain", "EncoderBR", driveTrainEncoderBR);
		driveTrainEncoderBR.setDistancePerPulse(1.0);
		driveTrainEncoderBR.setPIDSourceType(PIDSourceType.kRate);
		driveTrainEncoderFR = new Encoder(6, 7, false, EncodingType.k4X);
		LiveWindow.addSensor("DriveTrain", "EncoderFR", driveTrainEncoderFR);
		driveTrainEncoderFR.setDistancePerPulse(1.0);
		driveTrainEncoderFR.setPIDSourceType(PIDSourceType.kRate);
		driveTrainEncoderBL = new Encoder(4, 5, false, EncodingType.k4X);
		LiveWindow.addSensor("DriveTrain", "EncoderBL", driveTrainEncoderBL);
		driveTrainEncoderBL.setDistancePerPulse(1.0);
		driveTrainEncoderBL.setPIDSourceType(PIDSourceType.kRate);
		driveTrainEncoderFL = new Encoder(2, 3, false, EncodingType.k4X);
		LiveWindow.addSensor("DriveTrain", "EncoderFL", driveTrainEncoderFL);
		driveTrainEncoderFL.setDistancePerPulse(1.0);
		driveTrainEncoderFL.setPIDSourceType(PIDSourceType.kRate);
		armCANArm = new CANTalon(1);
		LiveWindow.addActuator("Arm", "CANArm", armCANArm);

		armArmPot = new AnalogPotentiometer(0, 1.0, 0.0);
		LiveWindow.addSensor("Arm", "ArmPot", armArmPot);

		winchWinchTop = new CANTalon(2);
		LiveWindow.addActuator("Winch", "WinchTop", winchWinchTop);

		winchWinchBottom = new CANTalon(3);
		LiveWindow.addActuator("Winch", "WinchBottom", winchWinchBottom);

		winchWinchDrive = new RobotDrive(winchWinchBottom, winchWinchTop);

		winchWinchDrive.setSafetyEnabled(true);
		winchWinchDrive.setExpiration(0.1);
		winchWinchDrive.setSensitivity(0.5);
		winchWinchDrive.setMaxOutput(1.0);

		flapFlapSpike = new Relay(0);
		LiveWindow.addActuator("Flap", "FlapSpike", flapFlapSpike);

		flapUpperLimitFlap = new DigitalInput(8);
		LiveWindow.addSensor("Flap", "UpperLimitFlap", flapUpperLimitFlap);

		flapLowerLimitFlap = new DigitalInput(9);
		LiveWindow.addSensor("Flap", "LowerLimitFlap", flapLowerLimitFlap);

		gearPlungerGearSpike = new Relay(1);
		LiveWindow.addActuator("GearPlunger", "GearSpike", gearPlungerGearSpike);

		gearPlungerPlungerLimit = new DigitalInput(11);
		LiveWindow.addSensor("GearPlunger", "PlungerLimit", gearPlungerPlungerLimit);

		rangeFinderSonarAI = new AnalogInput(1);
		LiveWindow.addSensor("RangeFinder", "SonarAI", rangeFinderSonarAI);


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
