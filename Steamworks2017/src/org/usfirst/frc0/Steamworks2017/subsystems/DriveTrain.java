// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.subsystems;


import org.usfirst.frc0.Steamworks2017.RobotMap;
import org.usfirst.frc0.Steamworks2017.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon cANTalonBR = RobotMap.driveTrainCANTalonBR;
    private final CANTalon cANTalonFR = RobotMap.driveTrainCANTalonFR;
    private final CANTalon cANTalonBL = RobotMap.driveTrainCANTalonBL;
    private final CANTalon cANTalonFL = RobotMap.driveTrainCANTalonFL;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final Encoder encoderBR = RobotMap.driveTrainEncoderBR;
    private final Encoder encoderFR = RobotMap.driveTrainEncoderFR;
    private final Encoder encoderBL = RobotMap.driveTrainEncoderBL;
    private final Encoder encoderFL = RobotMap.driveTrainEncoderFL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new BasicDrive(false, 0, 0, 0, 0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());

		cANTalonBR.changeControlMode(BasicDrive.Position); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANTalonBR.setFeedbackDevice(FeedbackDevice.QuadEncoder); //Set the feedback device that is hooked up to the talon
		cANTalonBR.setPID(0.5, 0.001, 0.0); //Set the PID constants (p, i, d)
		cANTalonBR.enableControl(); //Enable PID control on the talon
		System.out.println();

		encoderBR.get();
		encoderBR.getRaw();
		double distance = encoderBR.getDistance();
		double rate = encoderBR.getRate();
		boolean direction = encoderBR.getDirection();
		boolean stopped = encoderBR.getStopped();
	}
	{
		cANTalonBL.changeControlMode(BasicDrive.Position); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANTalonBL.setFeedbackDevice(FeedbackDevice.QuadEncoder); //Set the feedback device that is hooked up to the talon
		cANTalonBL.setPID(0.5, 0.001, 0.0); //Set the PID constants (p, i, d)
		cANTalonBL.enableControl(); //Enable PID control on the talon
		System.out.println();

		encoderBL.get();
		encoderBL.getRaw();
		double distance = encoderBL.getDistance();
		double rate = encoderBL.getRate();
		boolean direction = encoderBL.getDirection();
		boolean stopped = encoderBL.getStopped();
	}
	{
		cANTalonFR.changeControlMode(BasicDrive.Position); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANTalonFR.setFeedbackDevice(FeedbackDevice.QuadEncoder); //Set the feedback device that is hooked up to the talon
		cANTalonFR.setPID(0.5, 0.001, 0.0); //Set the PID constants (p, i, d)
		cANTalonFR.enableControl(); //Enable PID control on the talon
		System.out.println();

		encoderFR.get();
		encoderFR.getRaw();
		double distance = encoderFR.getDistance();
		double rate = encoderFR.getRate();
		boolean direction = encoderFR.getDirection();
		boolean stopped = encoderFR.getStopped();
	}
	{
		cANTalonFL.changeControlMode(TalonControlMode.Position); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANTalonFL.setFeedbackDevice(FeedbackDevice.QuadEncoder); //Set the feedback device that is hooked up to the talon
		cANTalonFL.setPID(0.5, 0.001, 0.0); //Set the PID constants (p, i, d)
		cANTalonFL.enableControl(); //Enable PID control on the talon

		encoderFL.get();
		encoderFL.getRaw();
		double distance = encoderFL.getDistance();
		double rate = encoderFL.getRate();
		boolean direction = encoderFL.getDirection();
		boolean stopped = encoderFL.getStopped();
	}


	public void driving(double driveX, double driveY, double rotation) {
		robotDrive.mecanumDrive_Cartesian(driveX, driveY, rotation, 0);
	}

	private void encoderFR (int i, int j, boolean b, EncodingType k4x) {
		// TODO Auto-generated method stub

	}

	public void autoDrive(double magnitude, double direction, double rotation) {
		robotDrive.mecanumDrive_Polar(magnitude, direction, rotation);
	}
}



