// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.subsystems;


import org.usfirst.frc0.Steamworks2017.RobotMap;
import org.usfirst.frc0.Steamworks2017.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon cANTalonBR = RobotMap.driveTrainCANTalonBR;
    private final CANTalon cANTalonFR = RobotMap.driveTrainCANTalonFR;
    private final CANTalon cANTalonBL = RobotMap.driveTrainCANTalonBL;
    private final CANTalon cANTalonFL = RobotMap.driveTrainCANTalonFL;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ManualDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());


	}
	 
	
	public void encoderBRControl(double m_PercentVBus){
		cANTalonBR.changeControlMode(TalonControlMode.PercentVbus);
		cANTalonBR.configEncoderCodesPerRev(25);
		cANTalonBR.setVoltageRampRate(6);
		cANTalonBR.enableControl();
		cANTalonBR.set(m_PercentVBus);
	}
	public int EncoderBRPosition(){
		return cANTalonBR.getEncPosition();
	}
	public int EncoderBRVelocity(){
		return cANTalonBR.getEncVelocity();
	}
	public void EncoderBRStop(){
		cANTalonBR.disableControl();
	}
//Encoder readings for the back right encoder ^
	
	public void encoderBLControl(double m_PercentVBus){
		cANTalonBL.changeControlMode(TalonControlMode.PercentVbus);
		cANTalonBL.configEncoderCodesPerRev(25);
		cANTalonBL.setVoltageRampRate(6);
		cANTalonBL.enableControl();
		cANTalonBL.set(m_PercentVBus);
	}
	public int EncoderBLPosition(){
		return cANTalonBL.getEncPosition();
	}
	public int EncoderBLVelocity(){
		return cANTalonBL.getEncVelocity();
	}
	public void EncoderBLStop(){
		cANTalonBL.disableControl();
	}
//Encoder readings for the back left encoder ^
	
	public void encoderFRControl(double m_PercentVBus){
		cANTalonFR.changeControlMode(TalonControlMode.PercentVbus);
		cANTalonFR.configEncoderCodesPerRev(25);
		cANTalonFR.setVoltageRampRate(6);
		cANTalonFR.enableControl();
		cANTalonFR.set(m_PercentVBus);
	}
	public int EncoderFRPosition(){
		return cANTalonFR.getEncPosition();
	}
	public int EncoderFRVelocity(){
		return cANTalonFR.getEncVelocity();
	}
	public void EncoderFRStop(){
		cANTalonFR.disableControl();
	}
//Encoder readings for front right encoder ^
	
	public void encoderFLControl(double m_PercentVBus){
		cANTalonFL.changeControlMode(TalonControlMode.PercentVbus);
		cANTalonFL.configEncoderCodesPerRev(25);
		cANTalonFL.setVoltageRampRate(6);
		cANTalonFL.enableControl();
		cANTalonFL.set(m_PercentVBus);
	}
	public int EncoderFLPosition(){
		return cANTalonFL.getEncPosition();
	}
	public int EncoderFLVelocity(){
		return cANTalonFL.getEncVelocity();
	}
	public void EncoderFLStop(){
		cANTalonFL.disableControl();
	}
//Encoder readings for front left encoder ^
 
	public void driving(double driveX, double driveY, double rotation) {
		robotDrive.mecanumDrive_Cartesian(driveX, driveY, rotation, 0);
	}

	public void autoDrive(double magnitude, double direction, double rotation) {
		robotDrive.mecanumDrive_Polar(magnitude, direction, rotation);
	}
}



