// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.subsystems;


import org.usfirst.frc0.Steamworks2017.RobotMap;
import org.usfirst.frc0.Steamworks2017.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon cANTalonBR = RobotMap.driveTrainCANTalonBR;
    private final CANTalon cANTalonFR = RobotMap.driveTrainCANTalonFR;
    private final CANTalon cANTalonBL = RobotMap.driveTrainCANTalonBL;
    private final CANTalon cANTalonFL = RobotMap.driveTrainCANTalonFL;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final Encoder encoderBR = RobotMap.driveTrainEncoderBR;
    private final Encoder encoderFR = RobotMap.driveTrainEncoderFR;
    private final Encoder encoderBL = RobotMap.driveTrainEncoderBL;
    private final Encoder encoderFL = RobotMap.driveTrainEncoderFL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new BasicDrive(false, 0, 0, 0, 0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());


	}
	 
	
	private double encoderBR() {
		
	    	return encoderBR.getRate();
	    }

	    public double getDistanceBR() {
	    	return encoderBR.getDistance();
	    }
	    
	    public double getRawBR() {
	    	return encoderBR.getRaw();
	    };
	//EncoderBR method declaration for live window
	private double encoderBL() {
		

	    	return encoderBL.getRate();
	    }

	    public double getDistanceBL() {
	    	return encoderBL.getDistance();
	    }
	    
	    public double getRawBL() {
	    	return encoderBL.getRaw();
	    }
	 //EncoderBL method declaration for live window
	private double encoderFR() {
		
	    	return encoderFR.getRate();
	    }

	    public double getDistanceFR() {
	    	return encoderFR.getDistance();
	    }
	    
	    public double getRawFR() {
	    	return encoderFR.getRaw();
	    };
	//EncoderFR method declaration for live window
	private double encoderFL() {
		// TODO Auto-generated method stub
	    	return encoderFL.getRate();
	    }

	    public double getDistanceFL() {
	    	return encoderFL.getDistance();
	    }
	    
	    public double getRawFL() {
	    	return encoderFL.getRaw();
	    };
	//EncoderFL method declaration for live window
	  
	
  //Read encoders in smartdashboard
   
    public void execute() {
    	SmartDashboard.getNumber("encoderBR",encoderBR());
    	SmartDashboard.getNumber("encoderBL",encoderBL());
    	SmartDashboard.getNumber("encoderFR", encoderFR());
    	SmartDashboard.getNumber("encoderFL", encoderFL());
	}
 
	public void driving(double driveX, double driveY, double rotation) {
		robotDrive.mecanumDrive_Cartesian(driveX, driveY, rotation, 0);
	}

	public void autoDrive(double magnitude, double direction, double rotation) {
		robotDrive.mecanumDrive_Polar(magnitude, direction, rotation);
	}
}



