// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.subsystems;

import org.usfirst.frc0.Steamworks2017.RobotMap;
import org.usfirst.frc0.Steamworks2017.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Arm extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final CANTalon cANArm = RobotMap.armCANArm;
	private final AnalogPotentiometer armPot = RobotMap.armArmPot;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());

	}

	public void armForward(){
		cANArm.changeControlMode(TalonControlMode.PercentVbus); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANArm.setPID(20.0, 0.0, 0.0); //Set the PID constants (p, i, d)
		cANArm.enableControl(); //Enable PID control on the talon
		setArmSpeed(0.5);
	}
	public void armBackward(){
		cANArm.changeControlMode(TalonControlMode.PercentVbus); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANArm.setPID(20.0, 0.0, 0.0); //Set the PID constants (p, i, d)
		cANArm.enableControl(); //Enable PID control on the talon
		setArmSpeed(0.5);
	}

	public void armStop(){
		cANArm.changeControlMode(TalonControlMode.PercentVbus); //Change control mode of talon, default is PercentVbus (-1.0 to 1.0)
		cANArm.setPID(20.0, 0.0, 0.0); //Set the PID constants (p, i, d)
		cANArm.enableControl(); //Enable PID control on the talon
		setArmSpeed(0.0);
	}
	public void setArmSpeed(double speed){
		cANArm.set(speed);
	}

	public boolean maxHeight(){
		if(armPot.pidGet()>=0.86){
			return true;
		}
		else{
			return false;
		}
	}

	public boolean maxHeight(double value){
		if(armPot.pidGet()>=value){
			return true;
		}
		else{
			return false;
		}
	}

	public boolean minHeight(){
		if(armPot.pidGet()<=0.05){
			return true;
		}
		else{
			return false;
		}
	}


	public boolean minHeight(double value){
		if(armPot.pidGet()<=value){
			return true;
		}
		else{
			return false;
		}
	}





}

