// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc0.Steamworks2017.Robot;

/**
 *
 */
public class RunWinchNRevolutions extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private int m_Revolutions;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private int m_executeCount;
    private double initialPosition;
    private double distanceTraveled;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public RunWinchNRevolutions(int Revolutions) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Revolutions = Revolutions;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.winch);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	System.out.println("Revolutions = " + m_Revolutions);
    	Robot.winch.winchControl(0.8);
    	initialPosition = Robot.winch.getWinchPosition();
    	m_executeCount = 0;
    	distanceTraveled = 0;
    	SmartDashboard.putNumber("Winch Velocity", Robot.winch.getWinchVelocity());
    	SmartDashboard.putNumber("Winch Position", -Robot.winch.getWinchPosition() + initialPosition);
    	SmartDashboard.putNumber("Initial Winch Position", initialPosition);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	m_executeCount++;
    	if(m_executeCount > 5){
    		m_executeCount = 0;
    		SmartDashboard.putNumber("Winch Velocity", Robot.winch.getWinchVelocity());
        	SmartDashboard.putNumber("Winch Position", -Robot.winch.getWinchPosition() + initialPosition);
    	}   	  	
		distanceTraveled = -Robot.winch.getWinchPosition() + initialPosition;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (distanceTraveled > 2680);
    }

    // Called once after isFinished returns true
    protected void end() {
    	SmartDashboard.putNumber("Winch Position", -Robot.winch.getWinchPosition() + initialPosition);
    	Robot.winch.winchStop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
