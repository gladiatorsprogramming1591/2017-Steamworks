// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017;

import org.usfirst.frc0.Steamworks2017.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc0.Steamworks2017.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released  and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton driveFowardTestButton;
	public JoystickButton driveBackwardTestButton;
	public JoystickButton armInButton;
	public JoystickButton armOutButton;
	public JoystickButton winchUpButton;
	public JoystickButton winchDownButton;
	public Joystick driveStick;
	public JoystickButton flapOpenButton;
	public JoystickButton flapCloseButton;
	public JoystickButton extractPlungerButton;
	public JoystickButton insertPlungerButton;
	public Joystick rotateStick;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		rotateStick = new Joystick(1);

		insertPlungerButton = new JoystickButton(rotateStick, 11);
		insertPlungerButton.whenPressed(new InsertPlunger());
		extractPlungerButton = new JoystickButton(rotateStick, 10);
		extractPlungerButton.whenPressed(new ExtractPlunger());
		flapCloseButton = new JoystickButton(rotateStick, 6);
		flapCloseButton.whenPressed(new FlapClose());
		flapOpenButton = new JoystickButton(rotateStick, 5);
		flapOpenButton.whenPressed(new FlapOpen());
		driveStick = new Joystick(0);

		winchDownButton = new JoystickButton(driveStick, 7);
		winchDownButton.whenPressed(new WinchDown(0, 0));
		winchUpButton = new JoystickButton(driveStick, 6);
		winchUpButton.whenPressed(new WinchUp(0, 0));
		armOutButton = new JoystickButton(driveStick, 11);
		armOutButton.whenPressed(new ArmOut(0));
		armInButton = new JoystickButton(driveStick, 10);
		armInButton.whenPressed(new ArmIn(0));
		driveBackwardTestButton = new JoystickButton(driveStick, 2);
		driveBackwardTestButton.whenPressed(new DriveBackwardTest());
		driveFowardTestButton = new JoystickButton(driveStick, 1);
		driveFowardTestButton.whenPressed(new DriveFowardTest());


		// SmartDashboard Buttons
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
		SmartDashboard.putData("BasicDrive: 5 sec 1/2 speed", new BasicDrive(true, 5, .5, 0, 0, 0));
		SmartDashboard.putData("DriveFowardTest", new DriveFowardTest());
		SmartDashboard.putData("DriveBackwardTest", new DriveBackwardTest());
		SmartDashboard.putData("ArmOut: 0.6", new ArmOut(0.6));
		SmartDashboard.putData("ArmIn: 0.4", new ArmIn(0.4));
		SmartDashboard.putData("WinchUp: 5 sec 1/2 speed", new WinchUp(5, 0.5));
		SmartDashboard.putData("WinchDown: 5 sec 1/2 speed", new WinchDown(5, -0.5));
		SmartDashboard.putData("ManualDrive", new ManualDrive());
		SmartDashboard.putData("InsertPlunger", new InsertPlunger());
		SmartDashboard.putData("ExtractPlunger", new ExtractPlunger());
		SmartDashboard.putData("FlapClose", new FlapClose());
		SmartDashboard.putData("FlapOpen", new FlapOpen());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getDriveStick() {
		return driveStick;
	}

	public Joystick getRotateStick() {
		return rotateStick;
	}


	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

